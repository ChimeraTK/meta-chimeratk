From 67134193bd262891cae5b4ae71d481be558c5611 Mon Sep 17 00:00:00 2001
From: Martin Hierholzer <martin.hierholzer@desy.de>
Date: Mon, 10 Mar 2025 16:39:59 +0000
Subject: [PATCH] fix: build with newer boost versions

Upstream-Status: Backport [03.20.00]
---
 backends/Rebot/src/Connection.cc               | 18 +++++++++---------
 backends/Rebot/src/Connection.h                |  2 +-
 .../include/RebotDummyServer.h                 |  4 ++--
 3 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/backends/Rebot/src/Connection.cc b/backends/Rebot/src/Connection.cc
index ad152220..73179ee9 100644
--- a/backends/Rebot/src/Connection.cc
+++ b/backends/Rebot/src/Connection.cc
@@ -11,18 +11,18 @@ namespace ChimeraTK::Rebot {
   using Error = boost::system::error_code;
 
   Connection::Connection(std::string address, std::string port, uint32_t connectionTimeout_sec)
-  : address_(std::move(address)), port_(std::move(port)), s_(ioService_), disconnectTimer_(ioService_),
+  : address_(std::move(address)), port_(std::move(port)), s_(ioContext_), disconnectTimer_(ioContext_),
     connectionTimeout_(boost::posix_time::seconds(connectionTimeout_sec)) {}
 
   void Connection::open() {
     try {
       disconnectionTimerStart();
-      boost::asio::ip::tcp::resolver r(ioService_);
+      boost::asio::ip::tcp::resolver r(ioContext_);
       boost::asio::async_connect(
-          s_, r.resolve({address_, port_}), [&](const Error ec, auto) { disconnectionTimerCancel(ec); });
+          s_, r.resolve(address_, port_), [&](const Error ec, auto) { disconnectionTimerCancel(ec); });
 
-      ioService_.reset();
-      ioService_.run();
+      ioContext_.restart();
+      ioContext_.run();
     }
     catch(const boost::exception&) {
       throw ChimeraTK::runtime_error("RebotBackend exception: Host unreachable:");
@@ -34,8 +34,8 @@ namespace ChimeraTK::Rebot {
     disconnectionTimerStart();
     boost::asio::async_read(s_, boost::asio::buffer(d), [&](Error ec, std::size_t) { disconnectionTimerCancel(ec); });
 
-    ioService_.reset();
-    ioService_.run();
+    ioContext_.restart();
+    ioContext_.run();
     return d;
   }
 
@@ -43,8 +43,8 @@ namespace ChimeraTK::Rebot {
     disconnectionTimerStart();
     boost::asio::async_write(s_, boost::asio::buffer(d), [&](Error ec, std::size_t) { disconnectionTimerCancel(ec); });
 
-    ioService_.reset();
-    ioService_.run();
+    ioContext_.restart();
+    ioContext_.run();
   }
 
   void Connection::close() {
diff --git a/backends/Rebot/src/Connection.h b/backends/Rebot/src/Connection.h
index 1499d76e..08f3c0f5 100644
--- a/backends/Rebot/src/Connection.h
+++ b/backends/Rebot/src/Connection.h
@@ -40,7 +40,7 @@ namespace ChimeraTK::Rebot {
    private:
     std::string address_;
     const std::string port_;
-    boost::asio::io_service ioService_;
+    boost::asio::io_context ioContext_;
     boost::asio::ip::tcp::socket s_;
     boost::asio::deadline_timer disconnectTimer_;
     boost::asio::deadline_timer::duration_type connectionTimeout_;
diff --git a/tests/RebotDummyServer/include/RebotDummyServer.h b/tests/RebotDummyServer/include/RebotDummyServer.h
index 200758ba..54dd6682 100644
--- a/tests/RebotDummyServer/include/RebotDummyServer.h
+++ b/tests/RebotDummyServer/include/RebotDummyServer.h
@@ -88,13 +88,13 @@ namespace ChimeraTK {
     bool is_running();
     unsigned int port() const { return _connectionAcceptor.local_endpoint().port(); }
 
-    boost::asio::io_service& service() { return _io; }
+    boost::asio::io_context& service() { return _io; }
     std::shared_ptr<RebotDummySession> session() { return _currentSession.lock(); }
 
    private:
     void do_accept();
     unsigned int _protocolVersion;
-    boost::asio::io_service _io;
+    boost::asio::io_context _io;
     ip::tcp::acceptor _connectionAcceptor;
     std::weak_ptr<RebotDummySession> _currentSession;
     ip::tcp::socket _socket;
