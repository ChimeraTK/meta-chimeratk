From 0552531adfa52387df143f68fba4442edf5a05ba Mon Sep 17 00:00:00 2001
From: Jens Georg <jens.georg@desy.de>
Date: Thu, 13 Apr 2023 13:58:43 +0200
Subject: [PATCH] Modernise CMake

---
 CMakeLists.txt              | 53 +++++++++++++----------------------
 cmake/Modules/FindQwt.cmake | 56 -------------------------------------
 tests/CMakeLists.txt        | 16 ++++-------
 3 files changed, 24 insertions(+), 101 deletions(-)
 delete mode 100644 cmake/Modules/FindQwt.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4ab3188..9e8921f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)
+cmake_minimum_required(VERSION 3.15)
 
 PROJECT(QtHardMon)
 
@@ -13,38 +13,32 @@ set(CMAKE_AUTOMOC ON)
 set(CMAKE_AUTOUIC ON)
 set(CMAKE_AUTORCC ON)
 
-## Set additional version-specific variables
-include(${CMAKE_SOURCE_DIR}/cmake/set_version_numbers.cmake)
 ## Load custom modules, i.e. FindDOOCS.cmake
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
 
-include(cmake/add_dependency.cmake)
-add_dependency(ChimeraTK-DeviceAccess 03.00 REQUIRED)
-find_package(Qt5Core REQUIRED)
-find_package(Qt5Network REQUIRED)
-find_package(Qt5Widgets REQUIRED)
-find_package(Qt5Gui REQUIRED)
-find_package(Qwt 6)
+find_package(ChimeraTK-DeviceAccess 03.00 REQUIRED)
+find_package(Qt5 COMPONENTS Core Network Widgets Gui REQUIRED)
 
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(QWT IMPORTED_TARGET Qt5Qwt6)
 FIND_PACKAGE(Boost COMPONENTS REQUIRED system filesystem)
-include_directories(${Boost_INCLUDE_DIRS})
-include_directories(${Qt5Core_INCLUDE_DIRS})
-include_directories(${Qt5Network_INCLUDE_DIRS})
-include_directories(${Qt5Widgets_INCLUDE_DIRS})
 
 include(${CMAKE_SOURCE_DIR}/cmake/set_default_build_to_release.cmake)
 include(${CMAKE_SOURCE_DIR}/cmake/set_default_flags.cmake)
 
-# setting this manually here. You might have to adapt the standard version in future. Having it in set_default_flags.cmake is giving too much trouble in other projects.
-if(NOT ${CMAKE_VERSION} VERSION_LESS "3.8")
-  set(CMAKE_CXX_STANDARD 17)
-endif()
-
 include_directories(${CMAKE_SOURCE_DIR}/src)
 aux_source_directory(${CMAKE_SOURCE_DIR}/src app_sources)
 list(REMOVE_ITEM app_sources ${CMAKE_SOURCE_DIR}/src/main.cpp)
 add_library(${PROJECT_NAME}_STATIC STATIC ${app_sources})
-TARGET_LINK_LIBRARIES(${PROJECT_NAME}_STATIC Qt5::Core  Qt5::Network Qt5::Widgets Qt5::Gui ${ChimeraTK-DeviceAccess_LIBRARIES} ${Boost_LIBRARIES})
+
+if(QWT_FOUND)
+  target_compile_definitions(${PROJECT_NAME}_STATIC PUBLIC USE_QWT=true)
+  set(QWT_TARGET "PkgConfig::QWT")
+else()
+  SET(QWT_TARGET "")
+  message("QWT not found, plotting is disabled in this build.")
+endif()
+target_link_libraries(${PROJECT_NAME}_STATIC Qt5::Core Qt5::Network Qt5::Widgets Qt5::Gui ChimeraTK::ChimeraTK-DeviceAccess Boost::system Boost::filesystem ${QWT_TARGET})
 
 #CMAKE from version 3.7 puts auto-generated objects in a target-specific directory and adds the include path only to this target.
 #To make the headers generated from the ui files of the library available to the executable and the test,
@@ -60,23 +54,14 @@ configure_file(cmake/QtHardMonVersion.h.in
 configure_file(cmake/QtHardMon.qrc.in
   "${PROJECT_BINARY_DIR}/QtHardMon.qrc" @ONLY)
 
-#The use of the QWT plotting library is optional
-if(QWT_FOUND)
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_QWT=true")
-  INCLUDE_DIRECTORIES( SYSTEM ${QWT_INCLUDE_DIR} )
-else(QWT_FOUND)
-  SET( QWT_LIBRARY "")
-  message("QWT not found, plotting is disabled in this build.")
-endif(QWT_FOUND)
-
 ADD_EXECUTABLE(${PROJECT_NAME} src/main.cpp ${PROJECT_BINARY_DIR}/QtHardMon.qrc)
+
 #The static library as well as its auto-generated headers are needed to compile main
-if(NOT ${CMAKE_VERSION} VERSION_LESS "3.7")
-  ADD_DEPENDENCIES(${PROJECT_NAME} ${PROJECT_NAME}_STATIC ${PROJECT_NAME}_STATIC_autogen)
-endif()
+ADD_DEPENDENCIES(${PROJECT_NAME} ${PROJECT_NAME}_STATIC ${PROJECT_NAME}_STATIC_autogen)
+
+TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_NAME}_STATIC Qt5::Core Qt5::Widgets Qt5::Gui Boost::system Boost::filesystem ChimeraTK::ChimeraTK-DeviceAccess ${QWT_TARGET})
 
-TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_NAME}_STATIC Qt5::Core Qt5::Widgets Qt5::Gui ${Boost_LIBRARIES}  ${ChimeraTK-DeviceAccess_LIBRARIES} ${QWT_LIBRARY})
-set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "${ChimeraTK-DeviceAccess_LINKER_FLAGS}")
+#The use of the QWT plotting library is optional
 
 include(cmake/enable_code_coverage_report.cmake)
 include(cmake/enable_doxygen_documentation.cmake)
diff --git a/cmake/Modules/FindQwt.cmake b/cmake/Modules/FindQwt.cmake
deleted file mode 100644
index 95cdff2..0000000
--- a/cmake/Modules/FindQwt.cmake
+++ /dev/null
@@ -1,56 +0,0 @@
-#
-# this module look for qwt (http://hdf.ncsa.uiuc.edu) support
-# it will define the following values
-#
-# QWT_INCLUDE_DIR  = where qwt.h can be found
-# QWT_LIBRARY      = the library to link against qwt
-# QWT_FOUND        = set to true after finding the library
-#
-
-INCLUDE(${CMAKE_ROOT}/Modules/FindOpenGL.cmake)
-INCLUDE(${CMAKE_ROOT}/Modules/FindQt.cmake)
-
-IF(EXISTS ${PROJECT_CMAKE}/QwtConfig.cmake)
-  INCLUDE(${PROJECT_CMAKE}/QwtConfig.cmake)
-ENDIF(EXISTS ${PROJECT_CMAKE}/QwtConfig.cmake)
-
-IF(Qwt_INCLUDE_DIRS)
-
-  FIND_PATH(QWT_INCLUDE_DIR qwt.h ${Qwt_INCLUDE_DIRS})
-  FIND_LIBRARY(QWT_LIBRARY qwt ${Qwt_LIBRARY_DIRS})
-
-ELSE(Qwt_INCLUDE_DIRS)
-
-  FIND_PATH(QWT_INCLUDE_DIR qwt.h 
-    /usr/include/qwt
-    /usr/include/qwt6
-    /usr/local/include/qwt
-    /usr/local/include/qwt6
-    /sw/include/qwt
-    /sw/include/qwt6
-    )
-  FIND_LIBRARY(QWT_LIBRARY qwt-qt5
-    /usr/lib
-    /usr/lib64
-    /usr/local/lib
-    /usr/local/lib64
-    /sw/lib
-    /sw/lib64
-    )
-
-ENDIF(Qwt_INCLUDE_DIRS)
-
-#message("QWT_INCLUDE_DIR is \"${QWT_INCLUDE_DIR}\", QWT_LIBRARY is \"${QWT_LIBRARY}\"")
-
-IF(QWT_INCLUDE_DIR AND QWT_LIBRARY) 
-  SET(QWT_FOUND 1 CACHE BOOL "Found qwt library")
-ELSE(QWT_INCLUDE_DIR AND QWT_LIBRARY) 
-  SET(QWT_FOUND 0 CACHE BOOL "Qwt library not found")
-ENDIF(QWT_INCLUDE_DIR AND QWT_LIBRARY) 
-
-MARK_AS_ADVANCED(
-  QWT_INCLUDE_DIR
-  QWT_LIBRARY
-  QWT_FOUND
-  )
-
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 9a49909..f8dfce2 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,13 +1,11 @@
 ## Setting up Boost Unit Test Framework.
-add_dependency(Boost 1.46 system unit_test_framework REQUIRED)
+find_package(Boost COMPONENTS REQUIRED system unit_test_framework)
 
 ## If there are any common tests' functionalities, they are compiled into separate library and later linked against each executable.
 include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
 aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src testSources)
 add_library( ${PROJECT_NAME}_TEST_LIBRARY ${testSources} )
-if(NOT ${CMAKE_VERSION} VERSION_LESS "3.7")
-  ADD_DEPENDENCIES(${PROJECT_NAME}_TEST_LIBRARY ${PROJECT_NAME}_STATIC_autogen)
-endif()
+ADD_DEPENDENCIES(${PROJECT_NAME}_TEST_LIBRARY ${PROJECT_NAME}_STATIC_autogen)
 
 include_directories(${CMAKE_SOURCE_DIR}/src)
 include_directories(${PROJECT_BINARY_DIR})
@@ -19,16 +17,12 @@ foreach( testExecutableSrcFile ${testExecutables})
   #NAME_WE means the base name without path and (longest) extension
   get_filename_component(executableName ${testExecutableSrcFile} NAME_WE)
   add_executable(${executableName} ${testExecutableSrcFile})
-  if(NOT ${CMAKE_VERSION} VERSION_LESS "3.7")
-    ADD_DEPENDENCIES(${executableName} ${PROJECT_NAME}_STATIC ${PROJECT_NAME}_STATIC_autogen)
-  endif()
-  target_link_libraries(${executableName} ${Boost_LIBRARIES} ${PROJECT_NAME}_STATIC Qt5::Core Qt5::Widgets Qt5::Gui
-                                          ${mtca4u-deviceaccess_LIBRARIES} ${PROJECT_NAME}_TEST_LIBRARY)
-  set_target_properties(${executableName} PROPERTIES LINK_FLAGS "${ChimeraTK-DeviceAccess_LINKER_FLAGS}")
+  ADD_DEPENDENCIES(${executableName} ${PROJECT_NAME}_STATIC ${PROJECT_NAME}_STATIC_autogen)
+  target_link_libraries(${executableName} Boost::system Boost::unit_test_framework ${PROJECT_NAME}_STATIC Qt5::Core Qt5::Widgets Qt5::Gui ChimeraTK::ChimeraTK-DeviceAccess ${PROJECT_NAME}_TEST_LIBRARY)
   add_test(${executableName} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${executableName})
 endforeach(testExecutableSrcFile)
 
 ## Copy files from test_files into the tests binary directory.
 foreach( DIRECTORY  test_files )
     file( COPY ${DIRECTORY} DESTINATION ${PROJECT_BINARY_DIR}/tests )
-  endforeach( DIRECTORY )
+endforeach( DIRECTORY )
